{"version":3,"sources":["../src/to-length-x.js"],"names":[],"mappings":"AAAA,OAAO,SAAP,IAAmB,aAAnB,QAAuC,cAAvC;AACA,OAAO,gBAAP,MAA6B,kBAA7B;AAEA;;;;;;;;AAOA,OAAO,SAAS,YAAT,CAAsB,KAAtB,EAA6B;AAClC,MAAM,GAAG,GAAG,aAAa,CAAC,KAAD,CAAzB,CADkC,CAGlC;;AACA,MAAI,GAAG,IAAI,CAAX,EAAc;AACZ,WAAO,CAAP;AACD;;AAED,MAAI,GAAG,GAAG,gBAAV,EAA4B;AAC1B,WAAO,gBAAP;AACD;;AAED,SAAO,GAAP;AACD;AAED;;;;;;;;AAOA,eAAe,SAAS,YAAT,CAAsB,KAAtB,EAA6B;AAC1C,MAAM,GAAG,GAAG,SAAS,CAAC,KAAD,CAArB,CAD0C,CAG1C;;AACA,MAAI,GAAG,IAAI,CAAX,EAAc;AACZ,WAAO,CAAP;AACD;;AAED,MAAI,GAAG,GAAG,gBAAV,EAA4B;AAC1B,WAAO,gBAAP;AACD;;AAED,SAAO,GAAP;AACD","file":"to-length-x.esm.js","sourcesContent":["import toInteger, {toInteger2016} from 'to-integer-x';\nimport MAX_SAFE_INTEGER from 'max-safe-integer';\n\n/**\n * Converts `value` to an integer suitable for use as the length of an\n * array-like object. (ES2016).\n *\n * @param {*} value - The value to convert.\n * @returns {number} Returns the converted integer.\n */\nexport function toLength2016(value) {\n  const len = toInteger2016(value);\n\n  // includes converting -0 to +0\n  if (len <= 0) {\n    return 0;\n  }\n\n  if (len > MAX_SAFE_INTEGER) {\n    return MAX_SAFE_INTEGER;\n  }\n\n  return len;\n}\n\n/**\n * Converts `value` to an integer suitable for use as the length of an\n * array-like object. (ES2018).\n *\n * @param {*} value - The value to convert.\n * @returns {number} Returns the converted integer.\n */\nexport default function toLength2018(value) {\n  const len = toInteger(value);\n\n  // includes converting -0 to +0\n  if (len <= 0) {\n    return 0;\n  }\n\n  if (len > MAX_SAFE_INTEGER) {\n    return MAX_SAFE_INTEGER;\n  }\n\n  return len;\n}\n"]}